version: 2.1

# Snippets for jobs:
setup_env: &setup_env
  run:
    name: Setup environment
    command: |
      env | sort > /tmp/env.old

      export HADOLINT_VER=1.18.0
      export SHELLCHECK_VER=0.7.1

      env | sort > /tmp/env.new
      ! diff -u /tmp/env.old /tmp/env.new | sed -n '/^+[^+]/s/^./export /p' >> $BASH_ENV
      env | grep _VER | sort > /tmp/tools.ver

      test -d ~/.ssh || install -m 0700 -d ~/.ssh
      test -f ~/.ssh/config || install -m 0600 /dev/null ~/.ssh/config
      test -d /run/.ssh && sudo sh -c "cp /run/.ssh/* $HOME/.ssh/; chown -R circleci:circleci $HOME/.ssh" || true # For scripts/test-ci-circle.
      test -d ~/.cache && sudo chown -R circleci:circleci ~/go ~/.cache || true # For scripts/test-ci-circle.
      echo -e 'Host *\n\tStrictHostKeyChecking accept-new' >> ~/.ssh/config
      git config --global url.ssh://git@github.com/.insteadOf https://github.com/

jobs:
  test:
    docker:
      - image: "cimg/go:1.15"
        environment:
          GOFLAGS: "-mod=readonly"
          MONO_TLS_CA_CERT: "configs/pki/ca.crt"
          MONO_X_MYSQL_ADDR_HOST: "localhost"
          MONO_X_NATS_ADDR_URLS: "nats://localhost:4222"
          MONO_X_POSTGRES_ADDR_HOST: "localhost"
          MONO_X_STAN_CLUSTER_ID: "ci"
          MONO__AUTH_POSTGRES_AUTH_LOGIN: "auth"
          MONO__AUTH_POSTGRES_AUTH_PASS: "authpass"
          MONO__AUTH_SECRET: "s3cr3t"
          MONO__AUTH_TLS_CERT: "configs/pki/issued/ms-auth.crt"
          MONO__AUTH_TLS_CERT_INT: "configs/pki/issued/ms-auth-int.crt"
          MONO__AUTH_TLS_KEY: "configs/pki/private/ms-auth.key"
          MONO__AUTH_TLS_KEY_INT: "configs/pki/private/ms-auth-int.key"
          MONO__EXAMPLE_MYSQL_AUTH_LOGIN: "root"
          MONO__EXAMPLE_MYSQL_AUTH_PASS: ""
          PGHOST: "localhost"
          PGUSER: "postgres"
          PGPASSWORD: "postgres"
      - image: "mysql:5.7"
        environment:
          MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
      - image: "postgres:11.10"
        environment:
          POSTGRES_PASSWORD: "postgres"
          # configs/pki/issued/postgres.crt
          CRT: |
            -----BEGIN CERTIFICATE-----
            MIIDsjCCApqgAwIBAgIRAMEzbE/A4QDHc5a7EH0yT1YwDQYJKoZIhvcNAQELBQAw
            OTE3MDUGA1UEAwwuRGV2IENBIGdpdGh1Yi5jb20vcG93ZXJtYW4vZ28tbW9ub2xp
            dGgtZXhhbXBsZTAeFw0yMDExMTMxNTM4MTNaFw0zMDExMTExNTM4MTNaMBMxETAP
            BgNVBAMMCHBvc3RncmVzMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA
            xpyORrle7GqBrlpIhNMMRIBLpNb3tM5shbH5t5FdIPp9nAe1HSL11x1UWUSVVl6l
            BSVknLo8Z6kY+keQC+ZLdIVOFNXdKGEm6f4HHjywvMtzX+qzzNwgj+5UPUL+xy5I
            qgMiBJFsPeqdqjNq5UIP7LuXbPy4EPY9lIoOJSdF3Wtgm9maBXL4yqz54i+tb+79
            h2SQtRbY3NsWGc6RZoEpPlhODgSUfIQxdBImZgC85j7xmfSmP6ID5hGnXce2EO+3
            Hk8Xx6Uxg4+W+JfdW6e/GHeEmcIWMhX/Fww8kSQWNDhbOPAcIhmtOI8wK7IoPvvJ
            NgKfN6jfSMnRt+BM1aNuHQIDAQABo4HaMIHXMAkGA1UdEwQCMAAwHQYDVR0OBBYE
            FKTXmcEADRpJSakWqubvm5pINObtMHQGA1UdIwRtMGuAFOz7gh3cy6P5+gKYENe2
            s5rvZ0zvoT2kOzA5MTcwNQYDVQQDDC5EZXYgQ0EgZ2l0aHViLmNvbS9wb3dlcm1h
            bi9nby1tb25vbGl0aC1leGFtcGxlghQiwcZHKfcmcZK6HimiKZD01IGu0zATBgNV
            HSUEDDAKBggrBgEFBQcDATALBgNVHQ8EBAMCBaAwEwYDVR0RBAwwCoIIcG9zdGdy
            ZXMwDQYJKoZIhvcNAQELBQADggEBABeACn6stlZqbtaiveV2gCrw+Lmp319ndYq1
            V30/Nq9xk3/wOERkHIf/VLO3OCSeQS2gF3RKEt0qaaIq66G2fs33hMCf2LYqN/ZX
            HfwSuqcrb49mQYD+bLCO8W7id6353yhu2Kfml+mnwcFob/EXfxBAMt5SIrJXvOf7
            V8j1gN4+3PEOnJhKSRm3th4vrs/LKZO/8KamVZUwO3TG0v7AM4Qhydm0V8DDQlWp
            PTJRcAMjJaCUA4aWA4FyBkR8BdKaolYO0lxBouqtcucqYvChfM2qz+irJhlVYMT+
            LuA2cFt802y28PXbeGpxCACmsxwriEy2D/hBfoPiScCifWFywPM=
            -----END CERTIFICATE-----
          # configs/pki/private/postgres.key
          KEY: |
            -----BEGIN PRIVATE KEY-----
            MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDGnI5GuV7saoGu
            WkiE0wxEgEuk1ve0zmyFsfm3kV0g+n2cB7UdIvXXHVRZRJVWXqUFJWScujxnqRj6
            R5AL5kt0hU4U1d0oYSbp/gcePLC8y3Nf6rPM3CCP7lQ9Qv7HLkiqAyIEkWw96p2q
            M2rlQg/su5ds/LgQ9j2Uig4lJ0Xda2Cb2ZoFcvjKrPniL61v7v2HZJC1Ftjc2xYZ
            zpFmgSk+WE4OBJR8hDF0EiZmALzmPvGZ9KY/ogPmEaddx7YQ77ceTxfHpTGDj5b4
            l91bp78Yd4SZwhYyFf8XDDyRJBY0OFs48BwiGa04jzArsig++8k2Ap83qN9IydG3
            4EzVo24dAgMBAAECggEBAKp1PSr3978iXfB87haJZ9L25XUxRmF4dO195VumN+6Q
            7fNXLhs2oRYhxv3ifeUlz62N/T8CG8u/9n7/omKEIah8rJn3Pxtj3lkfO464+drf
            JkNhFTWyi4PcQZJeiHn8gELh83VGNkchsHWeMZVX0IEWM41HjNaJ8ConHqLGhRDV
            jmSZQ07y0R35ximoy99y7ItZsNnXBJAS+sDVfmRc8Fz+FK5x8z2M+Qx0c+68vpaL
            PWTfHwozp+YaIwUZHR/GV8DgcaYofq9diRI4VRMOoITVFKzPlRNew8ehtrRUv09z
            gFO2XYeSRr0cJiVkOfU0VaGmgCZ38RGMOBeyzISz40UCgYEA81PUt3TUKLYUms0D
            bEfk+MIKOm22JgOxfQzY0XgQ6+UlM1pTldzFltmqTzjSyeCKtoCZWq77JDD0aXbe
            MvHTxI4NvIzAmb1VlgwkxdnzZEADLaNzEoGS2qRWWy0taFsCi2d3pi5kkGtmSG6Z
            IGPb4/9Ek+3dGRoY3pjHVcDGWWcCgYEA0PSMf2F/535Z2CM8muhxqX8u/4S8MVIm
            DsSHUbdqZZ5/G91bLPyCX4UjsPw2g3L28LmRBQ79Xgk0ctefoQm/Xt3T4oMCLD6i
            3WRvYZGuXgGyMwsZGqkP+7wDKAXSQsNo+qeUz15AQU0vccGJx6AS8WXbfNqR0JR7
            Hi/Pgoc0ldsCgYBspf7yV7Ev6HV01Zv0qnl79bB5fGl7ueRzkNvzVChCHJQqxOdT
            oDt96v0X2KiOSbvGV8+h5UXwWAeaW+BFYSOMvV021qZdP2RK1mtJCNOb7NU+eKA2
            IDNBe2Wv2pFO6mxNcMrFIiv3LG2EZBXtl4kk2eN2Jhy2S6fVJOTEzooCewKBgC14
            6pJV73W7Q2YL1QaJCyMtsFae1i2NiQaxshkQZzESGus/crYJhX2wBaJgYKSegirE
            11BYgL7UFfvf/LcY3fKRJ6klhXWHc/3l+28qOt3uVI9THPV2USohMjalfapVyCS0
            D2hJRIZxe5+v1IICzdyGpAs5rX3MsjZRhUEMl179AoGBAIyrf0Dh3OQj0/ZA83oc
            Y+qRcjG2fDtVxtuJbBrxP7oOT4vbhWl6AYztC++IapT4qPcqkduTYaMSRvSB+FaA
            nUq56U6esPDYi3khqh/89xre5sYhghm7V6EBZoyHBfkTZWH6dSF2vy/W17dY94hh
            VlUa0UYwNAl97XKKtm+boudR
            -----END PRIVATE KEY-----
        entrypoint:
          - bash
          - -c
          - |
            set -x -e -o pipefail
            echo "$CRT" | install -m 0440 -o root -g postgres /dev/stdin /server.crt
            echo "$KEY" | install -m 0440 -o root -g postgres /dev/stdin /server.key
            exec docker-entrypoint.sh postgres -c ssl=on \
                --ssl_cert_file=/server.crt --ssl_key_file=/server.key
      - image: "nats:2.1.4"
      - image: "nats-streaming:0.17.0"
        command:
          - "--cluster_id=ci"
          - "--max_channels=0"
          - "--max_subs=0"
          - "--max_msgs=0"
          - "--max_bytes=0"
          - "--max_age=0s"
          - "--max_inactivity=0s"
          - "--nats_server=nats://localhost:4222"
          - "--hb_interval=1s"
          - "--hb_timeout=1s"
          - "--hb_fail_count=3"
          - "--store=FILE"
          - "--dir=/tmp"
          - "--file_fds_limit=4000"
    steps:
      - checkout
      - *setup_env
      - restore_cache:
          keys:
            - v2-{{ checksum "/tmp/tools.ver" }}-{{ checksum "go.mod" }}-{{ .Branch }}
            - v2-{{ checksum "/tmp/tools.ver" }}-{{ checksum "go.mod" }}-
            - v2-{{ checksum "/tmp/tools.ver" }}-
      - run:
          name: Install tools
          command: |
            GO111MODULE=off go get -u github.com/myitcv/gobin
            hadolint --version | tee /dev/stderr | grep -wq v$HADOLINT_VER ||
              curl -sSfL https://github.com/hadolint/hadolint/releases/download/v${HADOLINT_VER}/hadolint-$(uname)-x86_64 | install /dev/stdin $(go env GOPATH)/bin/hadolint
            shellcheck --version | tee /dev/stderr | grep -wq $SHELLCHECK_VER ||
              curl -sSfL https://github.com/koalaman/shellcheck/releases/download/v${SHELLCHECK_VER}/shellcheck-v${SHELLCHECK_VER}.$(uname).x86_64.tar.xz | tar xJf - -C $(go env GOPATH)/bin --strip-components=1 shellcheck-v${SHELLCHECK_VER}/shellcheck
      - run:
          name: Ensure API spec match auto-generated code
          command: |
            go generate ./api/...
            git add . && git status --short && git diff-index --quiet HEAD
      - run: scripts/test
      - run:
          name: Report code coverage
          command: |
            scripts/cover
            # gobin -m -run github.com/mattn/goveralls -coverprofile=cover.out -service=CircleCI
      - save_cache:
          when: always
          key: v2-{{ checksum "/tmp/tools.ver" }}-{{ checksum "go.mod" }}-{{ .Branch }}
          paths:
            - ~/go/bin/
            - ~/go/pkg/
            - ~/go/src/
            - ~/.cache/go-build/
            - ~/.cache/golangci-lint/
            - ~/.cache/gobin/
            - .gobincache/

workflows:
  default:
    jobs:
      - test
