name: CI/CD

on:
  push:
    branches: master
    tags: v*
  pull_request:
    branches: master

env:
  GO_VERSION: '^1.15.2'
  GOFLAGS: '-mod=readonly'

jobs:

  test:
    runs-on: 'ubuntu-latest'
    timeout-minutes: 30
    services:
      mysql:
        image: 'mysql:5.7'
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: 'yes'
        ports:
          - '3306:3306'
      nats:
        image: 'nats:2.1.4'
        ports:
          - '4222:4222'
    env:
      HADOLINT_VER: '1.18.0'
      SHELLCHECK_VER: '0.7.1'
      MONO_TLS_CA_CERT: 'configs/pki/ca.crt'
      MONO_X_MYSQL_ADDR_HOST: 'localhost'
      MONO_X_NATS_ADDR_URLS: 'nats://localhost:4222'
      MONO_X_POSTGRES_ADDR_HOST: 'localhost'
      MONO_X_STAN_CLUSTER_ID: 'ci'
      MONO__AUTH_POSTGRES_AUTH_LOGIN: 'auth'
      MONO__AUTH_POSTGRES_AUTH_PASS: 'authpass'
      MONO__AUTH_SECRET: 's3cr3t'
      MONO__AUTH_TLS_CERT: 'configs/pki/issued/ms-auth.crt'
      MONO__AUTH_TLS_CERT_INT: 'configs/pki/issued/ms-auth-int.crt'
      MONO__AUTH_TLS_KEY: 'configs/pki/private/ms-auth.key'
      MONO__AUTH_TLS_KEY_INT: 'configs/pki/private/ms-auth-int.key'
      MONO__EXAMPLE_MYSQL_AUTH_LOGIN: 'root'
      MONO__EXAMPLE_MYSQL_AUTH_PASS: ''
      PGHOST: 'localhost'
      PGUSER: 'postgres'
      PGPASSWORD: 'postgres'
    steps:
      - name: Run STAN service
        run: |
          docker run -d --net=host nats-streaming:0.17.0 \
            --cluster_id=ci \
            --max_channels=0 \
            --max_subs=0 \
            --max_msgs=0 \
            --max_bytes=0 \
            --max_age=0s \
            --max_inactivity=0s \
            --nats_server=nats://localhost:4222 \
            --hb_interval=1s \
            --hb_timeout=1s \
            --hb_fail_count=3 \
            --store=FILE \
            --dir=/tmp \
            --file_fds_limit=4000

      - uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}

      - uses: actions/checkout@v2

      - name: Run PostgreSQL service
        run: |
          docker run -d --net=host \
            -e POSTGRES_PASSWORD=postgres \
            -v $PWD/configs/pki/issued/postgres.crt:/dev.crt \
            -v $PWD/configs/pki/private/postgres.key:/dev.key \
            --entrypoint=bash postgres:11.10 -c '
                set -x -e -o pipefail
                install -m 0440 -o root -g postgres /dev.crt /server.crt
                install -m 0440 -o root -g postgres /dev.key /server.key
                exec docker-entrypoint.sh postgres -c ssl=on \
                    --ssl_cert_file=/server.crt --ssl_key_file=/server.key
            '

      - name: Fetch master branch (to compare .proto files)
        run: |
          if ! git show-branch master >/dev/null 2>&1; then
            git fetch --depth=1 origin master && git branch master origin/master
          fi

      - name: Setup
        run: |
          env | grep _VER | sort > /tmp/tools.ver

      - uses: actions/cache@v2
        with:
          path: |
            ~/go/bin
            ~/go/pkg
            ~/go/src
            ~/.cache/go-build
            ~/.cache/golangci-lint
            ~/.cache/gobin
            .gobincache
          key: v2-test-${{ runner.os }}-${{ hashFiles('/tmp/tools.ver') }}-${{ hashFiles('go.mod') }}
          restore-keys: |
            v2-test-${{ runner.os }}-${{ hashFiles('/tmp/tools.ver') }}-

      - name: Install tools
        run: |
          GO111MODULE=off go get -u github.com/myitcv/gobin
          hadolint --version | tee /dev/stderr | grep -wq v$HADOLINT_VER ||
            curl -sSfL https://github.com/hadolint/hadolint/releases/download/v${HADOLINT_VER}/hadolint-$(uname)-x86_64 | install /dev/stdin $(go env GOPATH)/bin/hadolint
          shellcheck --version | tee /dev/stderr | grep -wq $SHELLCHECK_VER ||
            curl -sSfL https://github.com/koalaman/shellcheck/releases/download/v${SHELLCHECK_VER}/shellcheck-v${SHELLCHECK_VER}.$(uname).x86_64.tar.xz | tar xJf - -C $(go env GOPATH)/bin --strip-components=1 shellcheck-v${SHELLCHECK_VER}/shellcheck
          sudo apt update
          sudo apt install -y postgresql-client

      - name: Ensure API spec match auto-generated code
        run: |
          go generate ./api/...
          git add . && git status --short && git diff-index --quiet HEAD

      - run: scripts/test

      - name: Report code coverage
        env:
          COVERALLS_TOKEN: ${{ secrets.COVERALLS_TOKEN }}
        if: env.COVERALLS_TOKEN
        run: |
          scripts/cover
          gobin -m -run github.com/mattn/goveralls -coverprofile=cover.out -service=GitHub

  build-and-release:
    needs: test
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: github.event_name == 'push'
    steps:
      - uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}

      - uses: actions/checkout@v2

      - name: Turnstyle
        uses: softprops/turnstyle@v1
        with:
          poll-interval-seconds: 3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/cache@v2
        with:
          path: |
            ~/go/pkg
            ~/.cache/go-build
          key: v1-build-${{ runner.os }}-${{ hashFiles('go.mod') }}
          restore-keys: |
            v1-build-${{ runner.os }}-

      - run: scripts/build

      - name: Upload to GitHub Container Registry
        run: |
          docker login ghcr.io -u '${{ secrets.CR_USER }}' -p '${{ secrets.CR_PAT }}'
          if echo "$GITHUB_REF" | grep -q '^refs/tags/v'; then
            TAGS="${GITHUB_REF/refs\/tags\/v}"
          else
            #TAGS="$GITHUB_SHA latest"
            TAGS="latest"
          fi
          for TAG in $TAGS; do
            IMAGE_TAG="ghcr.io/${GITHUB_REPOSITORY,,*}:$TAG"
            docker tag "$(basename $(go list -m))" "$IMAGE_TAG"
            docker push "$IMAGE_TAG"
          done
