// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// AuthIntSvcClient is the client API for AuthIntSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthIntSvcClient interface {
	// Returns identity tied to access_token.
	CheckAccessToken(ctx context.Context, in *CheckAccessTokenRequest, opts ...grpc.CallOption) (*CheckAccessTokenResponse, error)
}

type authIntSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthIntSvcClient(cc grpc.ClientConnInterface) AuthIntSvcClient {
	return &authIntSvcClient{cc}
}

func (c *authIntSvcClient) CheckAccessToken(ctx context.Context, in *CheckAccessTokenRequest, opts ...grpc.CallOption) (*CheckAccessTokenResponse, error) {
	out := new(CheckAccessTokenResponse)
	err := c.cc.Invoke(ctx, "/powerman.example.auth.AuthIntSvc/CheckAccessToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthIntSvcServer is the server API for AuthIntSvc service.
// All implementations must embed UnimplementedAuthIntSvcServer
// for forward compatibility
type AuthIntSvcServer interface {
	// Returns identity tied to access_token.
	CheckAccessToken(context.Context, *CheckAccessTokenRequest) (*CheckAccessTokenResponse, error)
	mustEmbedUnimplementedAuthIntSvcServer()
}

// UnimplementedAuthIntSvcServer must be embedded to have forward compatible implementations.
type UnimplementedAuthIntSvcServer struct {
}

func (UnimplementedAuthIntSvcServer) CheckAccessToken(context.Context, *CheckAccessTokenRequest) (*CheckAccessTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAccessToken not implemented")
}
func (UnimplementedAuthIntSvcServer) mustEmbedUnimplementedAuthIntSvcServer() {}

// UnsafeAuthIntSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthIntSvcServer will
// result in compilation errors.
type UnsafeAuthIntSvcServer interface {
	mustEmbedUnimplementedAuthIntSvcServer()
}

func RegisterAuthIntSvcServer(s grpc.ServiceRegistrar, srv AuthIntSvcServer) {
	s.RegisterService(&_AuthIntSvc_serviceDesc, srv)
}

func _AuthIntSvc_CheckAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAccessTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthIntSvcServer).CheckAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/powerman.example.auth.AuthIntSvc/CheckAccessToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthIntSvcServer).CheckAccessToken(ctx, req.(*CheckAccessTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AuthIntSvc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "powerman.example.auth.AuthIntSvc",
	HandlerType: (*AuthIntSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckAccessToken",
			Handler:    _AuthIntSvc_CheckAccessToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "powerman/example/auth/service_int.proto",
}
