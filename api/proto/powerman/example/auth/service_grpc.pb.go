// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// NoAuthSvcClient is the client API for NoAuthSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NoAuthSvcClient interface {
	// Registers new user account.
	//
	// User can provide optional account_id (username).
	//
	// These fields will be ignored in input and set automatically:
	// account.name, account.user.name, account.user.access.
	//
	// If account_id=="admin" then user's role will be set to ROLE_ADMIN.
	//
	// XXX No email validation.
	CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*Account, error)
	// Authenticates user by different credentials.
	//
	// Creates and returns access_token.
	// Also returns user's account details for convenience.
	SigninIdentity(ctx context.Context, in *SigninIdentityRequest, opts ...grpc.CallOption) (*SigninIdentityResponse, error)
}

type noAuthSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewNoAuthSvcClient(cc grpc.ClientConnInterface) NoAuthSvcClient {
	return &noAuthSvcClient{cc}
}

func (c *noAuthSvcClient) CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*Account, error) {
	out := new(Account)
	err := c.cc.Invoke(ctx, "/powerman.example.auth.NoAuthSvc/CreateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noAuthSvcClient) SigninIdentity(ctx context.Context, in *SigninIdentityRequest, opts ...grpc.CallOption) (*SigninIdentityResponse, error) {
	out := new(SigninIdentityResponse)
	err := c.cc.Invoke(ctx, "/powerman.example.auth.NoAuthSvc/SigninIdentity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NoAuthSvcServer is the server API for NoAuthSvc service.
// All implementations must embed UnimplementedNoAuthSvcServer
// for forward compatibility
type NoAuthSvcServer interface {
	// Registers new user account.
	//
	// User can provide optional account_id (username).
	//
	// These fields will be ignored in input and set automatically:
	// account.name, account.user.name, account.user.access.
	//
	// If account_id=="admin" then user's role will be set to ROLE_ADMIN.
	//
	// XXX No email validation.
	CreateAccount(context.Context, *CreateAccountRequest) (*Account, error)
	// Authenticates user by different credentials.
	//
	// Creates and returns access_token.
	// Also returns user's account details for convenience.
	SigninIdentity(context.Context, *SigninIdentityRequest) (*SigninIdentityResponse, error)
	mustEmbedUnimplementedNoAuthSvcServer()
}

// UnimplementedNoAuthSvcServer must be embedded to have forward compatible implementations.
type UnimplementedNoAuthSvcServer struct {
}

func (UnimplementedNoAuthSvcServer) CreateAccount(context.Context, *CreateAccountRequest) (*Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (UnimplementedNoAuthSvcServer) SigninIdentity(context.Context, *SigninIdentityRequest) (*SigninIdentityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SigninIdentity not implemented")
}
func (UnimplementedNoAuthSvcServer) mustEmbedUnimplementedNoAuthSvcServer() {}

// UnsafeNoAuthSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NoAuthSvcServer will
// result in compilation errors.
type UnsafeNoAuthSvcServer interface {
	mustEmbedUnimplementedNoAuthSvcServer()
}

func RegisterNoAuthSvcServer(s grpc.ServiceRegistrar, srv NoAuthSvcServer) {
	s.RegisterService(&_NoAuthSvc_serviceDesc, srv)
}

func _NoAuthSvc_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoAuthSvcServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/powerman.example.auth.NoAuthSvc/CreateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoAuthSvcServer).CreateAccount(ctx, req.(*CreateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoAuthSvc_SigninIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SigninIdentityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoAuthSvcServer).SigninIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/powerman.example.auth.NoAuthSvc/SigninIdentity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoAuthSvcServer).SigninIdentity(ctx, req.(*SigninIdentityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NoAuthSvc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "powerman.example.auth.NoAuthSvc",
	HandlerType: (*NoAuthSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAccount",
			Handler:    _NoAuthSvc_CreateAccount_Handler,
		},
		{
			MethodName: "SigninIdentity",
			Handler:    _NoAuthSvc_SigninIdentity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "powerman/example/auth/service.proto",
}

// AuthSvcClient is the client API for AuthSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthSvcClient interface {
	// Logout.
	//
	// Invalidates either current or all user's access_token.
	//
	// (-- api-linter: core::0136::verb-noun=disabled --)
	SignoutIdentity(ctx context.Context, in *SignoutIdentityRequest, opts ...grpc.CallOption) (*SignoutIdentityResponse, error)
}

type authSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthSvcClient(cc grpc.ClientConnInterface) AuthSvcClient {
	return &authSvcClient{cc}
}

func (c *authSvcClient) SignoutIdentity(ctx context.Context, in *SignoutIdentityRequest, opts ...grpc.CallOption) (*SignoutIdentityResponse, error) {
	out := new(SignoutIdentityResponse)
	err := c.cc.Invoke(ctx, "/powerman.example.auth.AuthSvc/SignoutIdentity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthSvcServer is the server API for AuthSvc service.
// All implementations must embed UnimplementedAuthSvcServer
// for forward compatibility
type AuthSvcServer interface {
	// Logout.
	//
	// Invalidates either current or all user's access_token.
	//
	// (-- api-linter: core::0136::verb-noun=disabled --)
	SignoutIdentity(context.Context, *SignoutIdentityRequest) (*SignoutIdentityResponse, error)
	mustEmbedUnimplementedAuthSvcServer()
}

// UnimplementedAuthSvcServer must be embedded to have forward compatible implementations.
type UnimplementedAuthSvcServer struct {
}

func (UnimplementedAuthSvcServer) SignoutIdentity(context.Context, *SignoutIdentityRequest) (*SignoutIdentityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignoutIdentity not implemented")
}
func (UnimplementedAuthSvcServer) mustEmbedUnimplementedAuthSvcServer() {}

// UnsafeAuthSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthSvcServer will
// result in compilation errors.
type UnsafeAuthSvcServer interface {
	mustEmbedUnimplementedAuthSvcServer()
}

func RegisterAuthSvcServer(s grpc.ServiceRegistrar, srv AuthSvcServer) {
	s.RegisterService(&_AuthSvc_serviceDesc, srv)
}

func _AuthSvc_SignoutIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignoutIdentityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthSvcServer).SignoutIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/powerman.example.auth.AuthSvc/SignoutIdentity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthSvcServer).SignoutIdentity(ctx, req.(*SignoutIdentityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AuthSvc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "powerman.example.auth.AuthSvc",
	HandlerType: (*AuthSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignoutIdentity",
			Handler:    _AuthSvc_SignoutIdentity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "powerman/example/auth/service.proto",
}
